{
    "sourceFile": "app/Http/Controllers/Admin/VideotronController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754161202693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754161202693,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\Admin\\StoreVideotronRequest;\nuse App\\Http\\Requests\\Admin\\UpdateVideotronRequest;\nuse App\\Models\\Schedule;\nuse App\\Models\\Videotron;\nuse App\\Models\\Playlist;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;  \nuse Illuminate\\Support\\Facades\\Redirect;\nuse Inertia\\Inertia;\n\nclass VideotronController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Videotron::class);\n        $query = Videotron::orderBy('name');\n\n        // Filter pencarian teks\n        if ($request->filled('search')) {\n            $search = $request->input('search');\n            $query->where(function ($q) use ($search) {\n                $q->where('name', 'LIKE', \"%{$search}%\")\n                  ->orWhere('location_name', 'LIKE', \"%{$search}%\")\n                  ->orWhere('device_id', 'LIKE', \"%{$search}%\");\n            });\n        }\n\n        // --- FILTER BARU UNTUK STATUS ONLINE/OFFLINE ---\n        if ($request->filled('status')) {\n            $status = $request->input('status');\n            if ($status === 'online') {\n                $query->where('last_seen_at', '>=', now()->subMinutes(16));\n            } elseif ($status === 'offline') {\n                $query->where(function ($q) {\n                    $q->where('last_seen_at', '<', now()->subMinutes(16))\n                      ->orWhereNull('last_seen_at');\n                });\n            }\n        }\n\n        $videotrons = $query->paginate(10)->withQueryString();\n\n        // Tambahkan accessor ke data yang dikirim ke Vue\n        $videotrons->getCollection()->transform(function ($videotron) {\n            $videotron->is_online = $videotron->is_online;\n            $videotron->last_seen_at_for_humans = $videotron->last_seen_at_for_humans;\n            return $videotron;\n        });\n\n        return Inertia::render('Admin/Videotrons/Index', [\n            'videotronList' => $videotrons,\n            'allPlaylists' => Playlist::orderBy('name')->get(['id', 'name']),\n            'allSchedules' => Schedule::orderBy('name')->get(['id', 'name']),\n            'filters' => $request->only(['search', 'status']), // <-- Tambahkan status ke filter\n            'can' => ['manage_videotrons' => $request->user()->can('manage_videotrons')]\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(StoreVideotronRequest $request)\n    {\n        $validated = $request->validated();\n        \n        if (!empty($validated['password'])) {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        Videotron::create($validated);\n        return redirect()->route('admin.videotrons.index')->with('success', 'Videotron berhasil dibuat.');\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(string $id)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(string $id)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(UpdateVideotronRequest $request, Videotron $videotron)\n    {\n        $validated = $request->validated();\n        \n        if (!empty($validated['password'])) {\n            $validated['password'] = Hash::make($validated['password']);\n        } else {\n            unset($validated['password']);\n        }\n\n        $videotron->update($validated);\n        return redirect()->route('admin.videotrons.index')->with('success', 'Videotron berhasil diperbarui.');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(Videotron $videotron)\n    {\n        $this->authorize('delete', $videotron);\n        $videotron->delete();\n        return Redirect::route('admin.videotrons.index')->with([\n            'message' => 'Videotron berhasil dihapus.',\n            'type' => 'success'\n        ]);\n    }\n}\n"
        }
    ]
}
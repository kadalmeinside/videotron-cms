{
    "sourceFile": "app/Http/Controllers/Admin/Api/ScheduleItemController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754166770638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754166770638,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Media;\nuse App\\Models\\Schedule;\nuse App\\Models\\ScheduleItem;\nuse App\\Models\\Videotron;\nuse App\\Rules\\NoScheduleOverlap;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Facades\\DB;\nuse Kreait\\Firebase\\Messaging\\CloudMessage;\n\nclass ScheduleItemController extends Controller\n{\n    /**\n     * Menyimpan item jadwal baru.\n     */\n    public function store(Request $request): JsonResponse\n    {\n        $validated = $request->validate([\n            'schedule_id' => 'required|exists:schedules,id',\n            'media_id' => 'required|exists:media,id',\n            'schedule_date' => 'required|date_format:Y-m-d',\n            'play_time' => ['required', 'date_format:H:i', new NoScheduleOverlap],\n        ]);\n\n        $duration = Media::find($validated['media_id'])->duration;\n        $playAt = Carbon::createFromFormat('Y-m-d H:i', $validated['schedule_date'] . ' ' . $validated['play_time']);\n\n        ScheduleItem::create([\n            'schedule_id' => $validated['schedule_id'],\n            'media_id' => $validated['media_id'],\n            'play_at' => $playAt,\n            'duration_in_seconds' => $duration,\n        ]);\n\n        // Panggil pemicu FCM setelah berhasil menyimpan\n        $this->triggerFCMForSchedule($validated['schedule_id']);\n\n        return response()->json(['message' => 'Item jadwal berhasil ditambahkan.'], 201);\n    }\n\n    /**\n     * Memperbarui item jadwal yang sudah ada.\n     */\n    public function update(Request $request, ScheduleItem $scheduleItem): JsonResponse\n    {\n        $validated = $request->validate([\n            'media_id' => 'required|exists:media,id',\n            'schedule_date' => 'required|date_format:Y-m-d',\n            'play_time' => ['required', 'date_format:H:i', (new NoScheduleOverlap)->ignore($scheduleItem->id)],\n        ]);\n\n        $duration = Media::find($validated['media_id'])->duration;\n        $playAt = Carbon::createFromFormat('Y-m-d H:i', $validated['schedule_date'] . ' ' . $validated['play_time']);\n\n        $scheduleItem->update([\n            'media_id' => $validated['media_id'],\n            'play_at' => $playAt,\n            'duration_in_seconds' => $duration,\n        ]);\n        \n        // Panggil pemicu FCM setelah berhasil memperbarui\n        $this->triggerFCMForSchedule($scheduleItem->schedule_id);\n\n        return response()->json(['message' => 'Item jadwal berhasil diperbarui.']);\n    }\n\n    /**\n     * Menyalin semua item jadwal dari satu tanggal ke tanggal lain.\n     */\n    public function copyDate(Request $request, Schedule $schedule)\n    {\n        $validated = $request->validate([\n            'source_date' => 'required|date_format:Y-m-d',\n            'target_date' => 'required|date_format:Y-m-d|different:source_date',\n        ]);\n\n        $sourceDate = $validated['source_date'];\n        $targetDate = $validated['target_date'];\n\n        $sourceItems = $schedule->scheduleItems()\n            ->whereDate('play_at', $sourceDate)\n            ->get();\n\n        if ($sourceItems->isEmpty()) {\n            return response()->json(['message' => 'Tidak ada item untuk disalin dari tanggal sumber.'], 404);\n        }\n\n        // ... (logika pengecekan tumpang tindih tidak berubah) ...\n\n        try {\n            DB::transaction(function () use ($sourceItems, $targetDate, $schedule) {\n                foreach ($sourceItems as $itemToCopy) {\n                    $playTime = Carbon::parse($itemToCopy->play_at)->format('H:i:s');\n                    $newPlayAt = Carbon::parse($targetDate . ' ' . $playTime);\n\n                    ScheduleItem::create([\n                        'schedule_id' => $schedule->id,\n                        'media_id' => $itemToCopy->media_id,\n                        'play_at' => $newPlayAt,\n                        'duration_in_seconds' => $itemToCopy->duration_in_seconds,\n                    ]);\n                }\n            });\n        } catch (\\Exception $e) {\n            report($e);\n            return response()->json(['message' => 'Terjadi kesalahan internal saat menyalin jadwal.'], 500);\n        }\n\n        // Panggil pemicu FCM setelah berhasil menyalin\n        $this->triggerFCMForSchedule($schedule->id);\n\n        return response()->json(['message' => 'Jadwal dari tanggal ' . $sourceDate . ' berhasil disalin ke ' . $targetDate . '.']);\n    }\n\n    /**\n     * Menghapus item jadwal.\n     */\n    public function destroy(ScheduleItem $scheduleItem): JsonResponse\n    {\n        $scheduleId = $scheduleItem->schedule_id; // Simpan ID sebelum dihapus\n        $scheduleItem->delete();\n        \n        // Panggil pemicu FCM setelah berhasil menghapus\n        $this->triggerFCMForSchedule($scheduleId);\n\n        return response()->json(['message' => 'Item jadwal berhasil dihapus.'], 200);\n    }\n\n    /**\n     * Fungsi terpusat untuk mengirim notifikasi FCM ke semua perangkat\n     * yang menggunakan schedule tertentu.\n     */\n    private function triggerFCMForSchedule($scheduleId)\n    {\n        // 1. Perbarui versi schedule untuk menandakan ada perubahan\n        $schedule = Schedule::find($scheduleId);\n        if ($schedule) {\n            $schedule->touch(); // Ini akan memperbarui kolom `updated_at`\n        }\n\n        // 2. Cari semua videotron yang menggunakan schedule ini dan memiliki token FCM\n        $videotronsToNotify = Videotron::where('schedule_id', $scheduleId)\n                                       ->whereNotNull('fcm_token')\n                                       ->get();\n\n        if ($videotronsToNotify->isNotEmpty()) {\n            $messaging = app('firebase.messaging');\n\n            foreach ($videotronsToNotify as $videotron) {\n                try {\n                    // 3. Siapkan pesan data (notifikasi senyap)\n                    $message = CloudMessage::withTarget('token', $videotron->fcm_token)\n                        ->withData(['action' => 'force_sync']);\n\n                    // 4. Kirim pesan\n                    $messaging->send($message);\n\n                    \\Log::info(\"Pesan force_sync dikirim ke perangkat: {$videotron->name}\");\n\n                } catch (\\Exception $e) {\n                    \\Log::error(\"Gagal mengirim FCM ke {$videotron->name}: \" . $e->getMessage());\n                }\n            }\n        }\n    }\n}\n"
        }
    ]
}
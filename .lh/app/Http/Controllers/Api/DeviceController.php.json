{
    "sourceFile": "app/Http/Controllers/Api/DeviceController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754167223148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754167235538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,11 +199,11 @@\n      * Mengambil detail lengkap dari sebuah playlist musik.\n      */\n     public function getPlaylistDetail(Request $request, Playlist $playlist)\n     {\n-        if ($request->user()->playlist_id !== $playlist->id) {\n-            abort(403, 'Akses ditolak.');\n-        }\n+        // if ($request->user()->playlist_id !== $playlist->id) {\n+        //     abort(403, 'Akses ditolak.');\n+        // }\n \n         $playlist->load('musics');\n         \n         $requiredFiles = $playlist->musics->unique('id')->map(function ($music) {\n"
                }
            ],
            "date": 1754167223148,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Playlist;\nuse App\\Models\\Schedule;\nuse App\\Models\\Videotron;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Validation\\ValidationException;\n\nclass DeviceController extends Controller\n{\n    /**\n     * Mengecek status sebuah perangkat berdasarkan Device ID-nya.\n     * Dipanggil saat aplikasi pertama kali dibuka.\n     */\n    public function checkStatus(string $device_id)\n    {\n        $videotron = Videotron::where('device_id', $device_id)->first();\n\n        // Kasus 1: Perangkat tidak ditemukan sama sekali\n        if (!$videotron) {\n            return response()->json([\n                'status' => 'unregistered',\n                'message' => 'Perangkat ini belum terdaftar di sistem.'\n            ], 404);\n        }\n\n        // Kasus 2: Perangkat ditemukan, cek kolom statusnya\n        switch ($videotron->status) {\n            case 'active':\n                return response()->json([\n                    'status' => 'active',\n                    'message' => 'Perangkat terdaftar dan aktif, silahkan login.'\n                ]);\n            case 'inactive':\n                return response()->json([\n                    'status' => 'inactive',\n                    'message' => 'Perangkat ini dinonaktifkan oleh admin.'\n                ], 403);\n            case 'maintenance':\n                return response()->json([\n                    'status' => 'maintenance',\n                    'message' => 'Perangkat ini sedang dalam perbaikan.'\n                ], 403);\n            default:\n                // Untuk status lain yang mungkin ada atau belum di-set\n                return response()->json([\n                    'status' => 'pending_approval',\n                    'message' => 'Status perangkat tidak diketahui atau menunggu persetujuan.'\n                ], 403);\n        }\n    }\n\n    /**\n     * Mengotentikasi perangkat dan membuat API token.\n     */\n    public function login(Request $request)\n    {\n        $request->validate([\n            'device_id' => ['required', 'string'],\n            'password' => ['required', 'string'],\n        ]);\n\n        $videotron = Videotron::where('device_id', $request->device_id)->first();\n\n        // Verifikasi apakah videotron ditemukan, aktif, dan password-nya cocok\n        if (!$videotron || $videotron->status !== 'active' || !Hash::check($request->password, $videotron->password)) {\n            throw ValidationException::withMessages([\n                'device_id' => ['Kredensial tidak valid atau perangkat tidak aktif.'],\n            ]);\n        }\n\n        $videotron->tokens()->delete();\n        $token = $videotron->createToken('device-token')->plainTextToken;\n\n        return response()->json(['token' => $token]);\n    }\n\n    /**\n     * Mengambil semua jadwal yang akan datang untuk perangkat yang terotentikasi.\n     */\n    public function getSchedules(Request $request)\n    {\n        $videotron = $request->user();\n        $videotron->load(['scheduleItems.media', 'backgroundPlaylist.musics']);\n\n        $scheduleItems = $videotron->scheduleItems()\n            ->where('play_at', '>=', now()->startOfDay())\n            ->get();\n        \n        $groupedVideoSchedules = $scheduleItems->groupBy(function ($item) {\n            return $item->play_at->format('Y-m-d');\n        });\n\n        $requiredFiles = collect();\n\n        // Mengumpulkan file video dari jadwal\n        foreach ($scheduleItems as $item) {\n            if ($item->media && $item->media->source_type === 'local') {\n                // --- 2. PERBAIKAN NAMA FILE VIDEO ---\n                $extension = pathinfo($item->media->source_value, PATHINFO_EXTENSION);\n                $safeFileName = Str::slug($item->media->title) . '.' . $extension;\n\n                $requiredFiles->push([\n                    'id' => 'video_' . $item->media->id,\n                    'type' => 'video',\n                    'file_name' => $safeFileName,\n                    'download_url' => Storage::url($item->media->source_value),\n                ]);\n            }\n        }\n\n        // Mengumpulkan file musik dari playlist latar\n        if ($videotron->backgroundPlaylist) {\n            foreach ($videotron->backgroundPlaylist->musics as $music) {\n                // --- 3. PERBAIKAN NAMA FILE MUSIK ---\n                $extension = pathinfo($music->file_path, PATHINFO_EXTENSION);\n                $safeFileName = Str::slug($music->singer . '-' . $music->title) . '.' . $extension;\n\n                $requiredFiles->push([\n                    'id' => 'music_' . $music->id,\n                    'type' => 'music',\n                    'file_name' => $safeFileName,\n                    'download_url' => Storage::url($music->file_path),\n                ]);\n            }\n        }\n\n        return response()->json([\n            'videotron_name' => $videotron->name,\n            'video_schedules' => $groupedVideoSchedules,\n            'background_playlist' => $videotron->backgroundPlaylist,\n            'required_files' => $requiredFiles->unique('download_url')->values()->all(),\n        ]);\n    }\n\n    public function getConfig(Request $request)\n    {\n        $videotron = $request->user();\n\n        $schedule = $videotron->schedule;\n        $playlist = $videotron->backgroundPlaylist;\n\n        return response()->json([\n            'videotron_name' => $videotron->name,\n            'assigned_schedule' => $schedule ? [\n                'id' => $schedule->id,\n                'name' => $schedule->name,\n                'version' => $schedule->updated_at->timestamp,\n            ] : null,\n            'assigned_playlist' => $playlist ? [\n                'id' => $playlist->id,\n                'name' => $playlist->name,\n                'version' => $playlist->updated_at->timestamp,\n            ] : null,\n            'current_server_time' => now()->timestamp,\n        ]);\n    }\n\n    /**\n     * Mengambil detail lengkap dari sebuah template jadwal video.\n     */\n    public function getScheduleDetail(Request $request, Schedule $schedule)\n    {\n        // if ($request->user()->schedule_id !== $schedule->id) {\n        //     abort(403, 'Akses ditolak.');\n        // }\n\n        $schedule->load('scheduleItems.media');\n        \n        $requiredFiles = $schedule->scheduleItems->pluck('media')->filter(function ($media) {\n            return $media->source_type === 'local';\n        })->unique('id')->map(function ($media) {\n            $extension = pathinfo($media->source_value, PATHINFO_EXTENSION);\n            $safeFileName = Str::slug($media->title) . '.' . $extension;\n            return [\n                'id' => 'video_' . $media->id,\n                'type' => 'video',\n                'file_name' => $safeFileName,\n                'download_url' => Storage::url($media->source_value),\n            ];\n        })->values();\n\n        return response()->json([\n            'id' => $schedule->id,\n            'name' => $schedule->name,\n            'version' => $schedule->updated_at->timestamp,\n            'items' => $schedule->scheduleItems,\n            'required_files' => $requiredFiles,\n        ]);\n    }\n    \n    /**\n     * Mengambil detail lengkap dari sebuah playlist musik.\n     */\n    public function getPlaylistDetail(Request $request, Playlist $playlist)\n    {\n        if ($request->user()->playlist_id !== $playlist->id) {\n            abort(403, 'Akses ditolak.');\n        }\n\n        $playlist->load('musics');\n        \n        $requiredFiles = $playlist->musics->unique('id')->map(function ($music) {\n            $extension = pathinfo($music->file_path, PATHINFO_EXTENSION);\n            $safeFileName = Str::slug($music->singer . '-' . $music->title) . '.' . $extension;\n            return [\n                'id' => 'music_' . $music->id,\n                'type' => 'music',\n                'file_name' => $safeFileName,\n                'download_url' => Storage::url($music->file_path),\n            ];\n        })->values();\n\n        return response()->json([\n            'id' => $playlist->id,\n            'name' => $playlist->name,\n            'version' => $playlist->updated_at->timestamp,\n            'tracks' => $playlist->musics,\n            'required_files' => $requiredFiles,\n        ]);\n    }\n}"
        }
    ]
}